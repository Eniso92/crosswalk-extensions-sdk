# Copyright (c) 2015 Intel Corporation. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Generate .js files from .cc files.
#
# Variables
#   sources: Paths to .js files to compile.
#
# Example
#   xwalk_js2c("foo_js") {
#     sources = [
#       "foo_api.js",
#     ]
#   }
# Output
#   foo_api.cc will be generated into ${gen_dir}.
template("xwalk_js2c") {
  #set_sources_assignment_filter([ "*.js" ])

  assert(defined(invoker.sources),
         "Need sources in $target_name listing the .js files.")

  gen_target_name = target_name + "_gen"
  action_foreach(gen_target_name) {
    script = "//tools/generate_api.py"
    sources = invoker.sources
    outputs = [ "$target_gen_dir/{{source_name_part}}.cc" ]

    args = [
      "{{source}}",
      "kSource_{{source_name_part}}",
      "{{output}}",
    ]
  }

  source_set(target_name) {
    sources = get_target_outputs(":$gen_target_name")
    deps = [ ":$gen_target_name" ]
  }
}

# Generate C++ (.cc and .h) files from .idl file.
#
# Variables
#   sources: Paths to .idl file to compile.
#
# Example
#   xwalk_idlgen("baz_idl") {
#     namespace = "foo::bar"
#     sources = [
#       "baz.idl",
#     ]
#   }
#
# Output
#   baz.[cc|h] will be generated into ${gen_dir} with namespace foo::bar::baz
template("xwalk_idlgen") {
  assert(defined(invoker.namespace),
         "Need namespace in $target_name.")
  assert(defined(invoker.sources),
         "Need sources in $target_name the .idl files.")

  gen_target_name = target_name + "_gen"
  action_foreach(gen_target_name) {
    script = "//tools/json_schema_compiler/compiler.py"
    sources = invoker.sources
    outputs = [
      "$target_gen_dir/{{source_name_part}}.cc",
      "$target_gen_dir/{{source_name_part}}.h",
    ]

    namespace = invoker.namespace + "::%(namespace)s"

    args = [
      "{{source}}",
      "--root=../..",
      "--destdir=gen",
      "--namespace=$namespace",
      "--generator=cpp",
    ]
  }

  source_set(target_name) {
    sources = get_target_outputs(":$gen_target_name")
    deps = [ ":$gen_target_name" ]
  }
}
